import React, { useState, useEffect } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import axiosInstance from '../../axiosConfig';

const GroceryList = () => {
    const [groceryList, setGroceryList] = useState([]);
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        // fetch grocery list from database on page load
        const fetchGroceryList = async () => {
            try {
                const response = await axiosInstance.get(`${process.env.REACT_APP_API_URL}/groceryList/getGroceryList`, { withCredentials: true });
                setGroceryList(response.data);
            } catch (err) {
                console.error(err);
            }
        };

        fetchGroceryList();
    }, []);

    const submitGroceryList = async () => {
        const response = await axiosInstance.post(`${process.env.REACT_APP_API_URL}/groceryList/setGroceryList`, groceryList);
        if (response.status === 200) {
            setSuccessMessage('Changes were successfully saved.');
        }
    }

    const addGroceryItem = () => {
        // the id of each item is generated by the uuid library's v4 algorithm which generates a unique id.
        setGroceryList([...groceryList, { id: uuidv4(), name: '' }]);
    };

    const removeGroceryItem = (id) => {
        setGroceryList(groceryList.filter((item) => item.id !== id));
    };

    const handleInputChange = (id, newName) => {
        // while we have an html input element, it's probably a good idea to directly store the input's value 
        // to a state whenever a change happens. This is because we have to interact with the input value when making
        // api calls to the backend, ex. a POST request to submit to the database (if we are going to be using REST API)
        setSuccessMessage('There are unsaved changes.');
        setGroceryList(groceryList.map(item => item.id === id ? {...item, name: newName} : item));
    };

    const handleDragEnd = (result) => {
        // make item return to original position if it was dropped outside of list
        if (!result.destination) return; 
        // make shallow copy of groceryList. this is because directly updating states during calculation is bad practice (I think)
        const items = Array.from(groceryList);
        // remove and extract the dragged item from the list
        const [reorderedItem] = items.splice(result.source.index, 1);
        // insert the dragged item into the newly dropped location (dnd library stores this in result.destination.index)
        items.splice(result.destination.index, 0, reorderedItem);
        // calculation is over, so we can setState now. 
        setGroceryList(items);
    };

    return (
        <div>
            <DragDropContext onDragEnd={handleDragEnd}>
                <Droppable droppableId="groceryList">
                    {/* 
                        "provided" is an object used by drag & drop library that helps implement drag and drop features for us.
                        provided.innerRef tells the library the location/position of each item in the list,
                        provided.dragHandleProps probably lets the library know what part of the list is draggable by the user, etc
                     */}
                    {(provided) => (
                        <ul {...provided.droppableProps} ref={provided.innerRef}>
                            {groceryList.map((item, index) => (
                                <Draggable key={item.id} draggableId={item.id} index={index}>
                                    {(provided) => (
                                        <li
                                            ref={provided.innerRef}
                                            {...provided.draggableProps}
                                            {...provided.dragHandleProps}
                                        >
                                            <input 
                                                value={item.name} 
                                                onChange={(e) => handleInputChange(item.id, e.target.value)} 
                                            />
                                            <button onClick={() => removeGroceryItem(item.id)}>Remove</button>
                                        </li>
                                    )}
                                </Draggable>
                            ))}
                            {provided.placeholder}
                        </ul>
                    )}
                </Droppable>
            </DragDropContext>
            <div>
                <button onClick={addGroceryItem}>Add Item</button>
                <button onClick={submitGroceryList}>Save Grocery List</button>
                {successMessage !== '' && 
                    <p>{successMessage}</p>
                }
            </div>
        </div>
    );
};

export default GroceryList;